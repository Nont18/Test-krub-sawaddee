#include <functional>
#include <gazebo/gazebo.hh>
#include <gazebo/physics/physics.hh>
#include <gazebo/common/common.hh>
#include <ignition/math/Vector3.hh>

namespace gazebo
{
  class YawDampingTorquePlugin : public ModelPlugin
  {
    public: void Load(physics::ModelPtr _parent, sdf::ElementPtr _sdf)
    {
      // Store the pointer to the model
      this->model = _parent;
      if(_sdf->HasElement("link_name"){
      	this->damping_coef = _sdf->GetElement("link_name");
      }
      // Listen to the update event. This event is broadcast every
      // simulation iteration.
      this->updateConnection = event::Events::ConnectWorldUpdateBegin(
          std::bind(&YawDampingTorquePlugin::OnUpdate, this));
    }

    // Called by the world update start event
    public: void OnUpdate()
    {
      // Apply a small linear velocity to the model.
      world_frame = model->WorldAngularVel(); //WorldAngularVel();
      phi_dot = (-1)*world_frame.Z();
      this->torque = damping_coef*phi_dot*abs(phi_dot);
      this->model->AddRelativeTorque(ignition::math::Vector3d(0,0,torque));	

    }

    // Pointer to the model
    private:
    	physics::ModelPtr model;
	double damping_coef;
	double world_frame;
	double phi_dot;
	double torque;

    // Pointer to the update event connection
    private: event::ConnectionPtr updateConnection;
  };

  // Register this plugin with the simulator
  GZ_REGISTER_MODEL_PLUGIN(YawDampingTorquePlugin)
}
